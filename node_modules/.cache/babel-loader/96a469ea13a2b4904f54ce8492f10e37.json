{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\SEBASTIEN\\\\Desktop\\\\Exercices Web\\\\React\\\\Projets\\\\Snapchat\\\\snapchat\\\\src\\\\Chats.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Chats.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { auth, db } from \"./firebase\";\nimport Chat from \"./Chat\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser } from \"./features/appSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\nimport { resetCameraImage } from \"./features/cameraSlice\";\nimport { FireSQL } from \"firesql\";\nimport firebase from \"firebase/app\";\nimport \"firesql/rx\";\nimport \"firebase/firestore\";\n\nfunction Chats() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [personQuery, setPersonQuery] = useState(\"\");\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  const takeSnap = () => {\n    dispatch(resetCameraImage());\n    history.push(\"/capture\");\n  };\n\n  const getPosts = () => {\n    db.collection(\"posts\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => setPosts(snapshot.docs.map(doc => ({\n      id: doc.id,\n      data: doc.data()\n    }))));\n  };\n\n  const getPersonQuery = e => {\n    e.preventDefault();\n    const nameCapitalized = personQuery.charAt(0).toUpperCase() + personQuery.slice(1);\n    console.log(nameCapitalized);\n\n    if (personQuery !== \"\") {\n      const fireSQL = new FireSQL(firebase.firestore());\n      const persons = fireSQL.rxQuery(`\n  SELECT *\n  FROM posts\n  WHERE username LIKE '${personQuery}%' or username LIKE '${nameCapitalized}%'\n  ORDER BY username, timestamp DESC\n`, {\n        includeId: \"id\"\n      });\n      persons.subscribe(results => {\n        console.log(results);\n\n        if (results.size !== 0) {\n          setPosts(results.map(doc => ({\n            id: doc.id,\n            data: {\n              username: doc.username,\n              imageUrl: doc.imageUrl,\n              profilePic: doc.profilePic,\n              read: doc.read,\n              timestamp: doc.timestamp\n            }\n          })));\n        }\n      });\n    } // setPersonQuery(\"\");\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chats\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats__header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: user.profilePic,\n        onClick: () => {\n          auth.signOut();\n        },\n        className: \"chats__avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chats__search\",\n        children: [/*#__PURE__*/_jsxDEV(SearchIcon, {\n          onClick: getPosts,\n          className: \"chats__searchIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: getPersonQuery,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setPersonQuery(e.target.value),\n            value: personQuery,\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBubbleIcon, {\n        className: \"chats__chatIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chats__posts\",\n      children: posts.map(({\n        id,\n        data: {\n          profilePic,\n          username,\n          timestamp,\n          imageUrl,\n          read\n        }\n      }) => /*#__PURE__*/_jsxDEV(Chat, {\n        profilePic: profilePic,\n        username: username,\n        timestamp: timestamp,\n        imageUrl: imageUrl,\n        read: read,\n        id: id\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CameraAltIcon, {\n      className: \"chats__takePicIcon\",\n      onClick: takeSnap,\n      fontSize: \"large\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chats, \"H/QA8N0k0XQade54AoHjQM09/Qc=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = Chats;\nexport default Chats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"sources":["C:/Users/SEBASTIEN/Desktop/Exercices Web/React/Projets/Snapchat/snapchat/src/Chats.js"],"names":["Avatar","React","useEffect","useState","SearchIcon","ChatBubbleIcon","auth","db","Chat","useSelector","useDispatch","selectUser","useHistory","CameraAltIcon","resetCameraImage","FireSQL","firebase","Chats","posts","setPosts","personQuery","setPersonQuery","user","dispatch","history","getPosts","takeSnap","push","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","getPersonQuery","e","preventDefault","nameCapitalized","charAt","toUpperCase","slice","console","log","fireSQL","firestore","persons","rxQuery","includeId","subscribe","results","size","username","imageUrl","profilePic","read","timestamp","signOut","target","value"],"mappings":"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","sourcesContent":["import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Chats.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\r\nimport { auth, db } from \"./firebase\";\r\nimport Chat from \"./Chat\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectUser } from \"./features/appSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CameraAltIcon from \"@material-ui/icons/CameraAlt\";\r\nimport { resetCameraImage } from \"./features/cameraSlice\";\r\nimport { FireSQL } from \"firesql\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firesql/rx\";\r\nimport \"firebase/firestore\";\r\n\r\nfunction Chats() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [personQuery, setPersonQuery] = useState(\"\");\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const takeSnap = () => {\r\n    dispatch(resetCameraImage());\r\n    history.push(\"/capture\");\r\n  };\r\n\r\n  const getPosts = () => {\r\n    db.collection(\"posts\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) =>\r\n        setPosts(\r\n          snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            data: doc.data(),\r\n          }))\r\n        )\r\n      );\r\n  };\r\n\r\n  const getPersonQuery = (e) => {\r\n    e.preventDefault();\r\n\r\n    const nameCapitalized =\r\n      personQuery.charAt(0).toUpperCase() + personQuery.slice(1);\r\n    console.log(nameCapitalized);\r\n\r\n    if (personQuery !== \"\") {\r\n      const fireSQL = new FireSQL(firebase.firestore());\r\n      const persons = fireSQL.rxQuery(\r\n        `\r\n  SELECT *\r\n  FROM posts\r\n  WHERE username LIKE '${personQuery}%' or username LIKE '${nameCapitalized}%'\r\n  ORDER BY username, timestamp DESC\r\n`,\r\n        { includeId: \"id\" }\r\n      );\r\n\r\n      persons.subscribe((results) => {\r\n        console.log(results);\r\n        if (results.size !== 0) {\r\n          setPosts(\r\n            results.map((doc) => ({\r\n              id: doc.id,\r\n              data: {\r\n                username: doc.username,\r\n                imageUrl: doc.imageUrl,\r\n                profilePic: doc.profilePic,\r\n                read: doc.read,\r\n                timestamp: doc.timestamp,\r\n              },\r\n            }))\r\n          );\r\n        }\r\n      });\r\n    }\r\n    // setPersonQuery(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chats\">\r\n      <div className=\"chats__header\">\r\n        <Avatar\r\n          src={user.profilePic}\r\n          onClick={() => {\r\n            auth.signOut();\r\n          }}\r\n          className=\"chats__avatar\"\r\n        />\r\n        <div className=\"chats__search\">\r\n          <SearchIcon onClick={getPosts} className=\"chats__searchIcon\" />\r\n          <form onSubmit={getPersonQuery}>\r\n            <input\r\n              onChange={(e) => setPersonQuery(e.target.value)}\r\n              value={personQuery}\r\n              type=\"text\"\r\n            />\r\n          </form>\r\n        </div>\r\n        <ChatBubbleIcon className=\"chats__chatIcon\" />\r\n      </div>\r\n\r\n      <div className=\"chats__posts\">\r\n        {posts.map(\r\n          ({\r\n            id,\r\n            data: { profilePic, username, timestamp, imageUrl, read },\r\n          }) => (\r\n            <Chat\r\n              key={id}\r\n              profilePic={profilePic}\r\n              username={username}\r\n              timestamp={timestamp}\r\n              imageUrl={imageUrl}\r\n              read={read}\r\n              id={id}\r\n            />\r\n          )\r\n        )}\r\n      </div>\r\n      <CameraAltIcon\r\n        className=\"chats__takePicIcon\"\r\n        onClick={takeSnap}\r\n        fontSize=\"large\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n"]},"metadata":{},"sourceType":"module"}